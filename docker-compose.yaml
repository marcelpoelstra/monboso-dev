version: "3"

x-logging:
  &default-logging
  options:
    max-size: '1G'
    max-file: '5'
  driver: json-file

x-vc-volumes:
  &default-vc-volumes
  - type: bind
    source: ./channels
    target: /channels

services:
  # Unified Origin for VC
  origin:
    image: ghcr.io/unifiedstreaming/virtual-channel-origin:${VC_VERSION}
    logging: *default-logging
    restart: always
    deploy:
      replicas: 2
    env_file:
      - vc-origin.env
    volumes:
      - type: bind
        source: ./apache-conf/status.conf
        target: /etc/apache2/conf-enabled/status.conf
      - type: bind
        source: ./apache-conf/sunset.conf
        target: /etc/apache2/conf-enabled/sunset.conf
      - type: bind
        source: ./apache-conf/dash_status.conf
        target: /etc/apache2/conf-enabled/dash_status.conf
      - type: bind
        source: ./apache-conf/no_log_netdata.conf
        target: /etc/apache2/conf-enabled/no_log_netdata.conf
      - type: bind
        source: ./channels
        target: /var/www/unified-origin/    

  # Virtual Channel application
  virtual-channel-api:
    image: ghcr.io/unifiedstreaming/virtual-channel-app:${VC_VERSION}
    restart: always
    logging: *default-logging
    env_file:
      - vc-api.env
    volumes: *default-vc-volumes
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --proxy-headers --forwarded-allow-ips *
    ports:
       - "8000:8000"

  # Manifest Proxy application
  manifest-proxy:
    image: ghcr.io/unifiedstreaming/virtual-channel-manifest-proxy:${VC_VERSION}
    restart: always
    logging: *default-logging
    env_file:
      - manifest-proxy.env
    volumes:
      - type: bind
        source: ./channels
        target: /channels
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --proxy-headers --forwarded-allow-ips *

  # Virtual Channel workers
  virtual-channel-worker-vod2live:
    image: ghcr.io/unifiedstreaming/virtual-channel-app:${VC_VERSION}
    restart: always
    logging: *default-logging
    env_file:
      - vc-worker.env
    volumes: *default-vc-volumes
    command: celery -A app.tasks.vod2live worker -Q vod2live --loglevel info

  virtual-channel-worker-transition:
    image: ghcr.io/unifiedstreaming/virtual-channel-app:${VC_VERSION}
    restart: always
    logging: *default-logging
    env_file:
      - vc-worker.env
    volumes: *default-vc-volumes
    command: celery -A app.tasks.trigger_transition worker -Q trigger_transition --loglevel info

  virtual-channel-worker-housekeeping:
    image: ghcr.io/unifiedstreaming/virtual-channel-app:${VC_VERSION}
    restart: always
    logging: *default-logging
    env_file:
      - vc-worker.env
    volumes: *default-vc-volumes
    command: celery -A app.tasks.housekeeping worker --loglevel info

  virtual-channel-celery-beat:
    image: ghcr.io/unifiedstreaming/virtual-channel-app:${VC_VERSION}
    restart: always
    logging: *default-logging
    env_file:
      - vc-worker.env
    volumes: *default-vc-volumes
    command: celery -A app.task_schedule beat --loglevel info

  # Redis and Rabbitmq for task queue and results storage
  redis:
    image: redis:7.0.4
    restart: always
    entrypoint: redis-server --appendonly yes
    logging: *default-logging
    volumes:
      - redis_data:/data

  rabbitmq:
    logging: *default-logging
    hostname: vc-rabbit
    image: rabbitmq:3.11.0-alpine
    restart: always
    # Set consumer_timeout to allow Celery jobs with long ETA, see
    # https://docs.celeryq.dev/en/stable/userguide/calling.html#eta-and-countdown
    env_file:
      - rabbitmq.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Unified Origin for VoD
  vod-origin:
    image:   unifiedstreaming/origin:latest
    restart: always
    deploy:
      replicas: 1
    env_file:
      - vod-origin.env
    volumes:
      - type: bind
        source: ./apache-conf/status.conf
        target: /etc/apache2/conf.d/status.conf 

  # Nginx chield cache
  nginx-proxy:
    logging: *default-logging
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - '80:80'
    env_file:
      - nginx.env
    networks:
      default:
        aliases:
          - nginx-status
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /var/log/nginx/:/var/log/nginx/
      - ./nginx-conf/nginx_status.conf:/etc/nginx/conf.d/nginx_status.conf:ro
      - ./nginx-conf/proxy.conf:/etc/nginx/proxy.conf:ro
      - ./nginx-conf/templates:/app/templates
      - ./nginx-conf/static/prefetch.js:/usr/share/nginx/html/static/prefetch.js:ro
      - ./nginx-conf/certs:/etc/nginx/certs
      - ./nginx-conf/vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html 
      - type: tmpfs
        target: /var/cache/nginx
        tmpfs:
          size: 1G
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M

# Netdata monitoring 
  netdata:
    image: netdata/netdata:${NETDATA_VERSION}
    container_name: netdata
    hostname: ${HOSTNAME}
    env_file:
      - netdata.env
    ports:
      - 19999:19999
    restart: always
    pid: host
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - ./netdataconfig/netdata:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/nginx:/var/log/nginx:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro

# BETA leonardo dashboard
  app:
    image: drienultwee/monboso-virtual-channels-app:master
    env_file:
      - app.env
    ports: 
      - 9000:9000

# BETA Demo Bitmovin player  
  player:
    build: player
    env_file:
      - player.env
    volumes:
      - ./player/html:/usr/local/apache2/htdocs

volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  certs:
    driver: local
  vhostd:
    driver: local 
  html:
    driver: local
  netdatalib:
    driver: local 
  netdatacache:
    driver: local 
